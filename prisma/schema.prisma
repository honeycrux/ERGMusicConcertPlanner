// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Performance {
  id                   String @id @default(auto()) @map("_id") @db.ObjectId
  genre                String @default("")
  piece                String @default("")
  description          String @default("")
  performerList        String @default("")
  performerDescription String @default("")
  remarks              String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  applicant        Applicant?        @relation(name: "PerformanceApplicant")
  preference       Preference?       @relation(name: "PerformancePreference")
  stageRequirement StageRequirement? @relation(name: "PerformanceStageRequirement")
  rehearsalSlot    RehearsalSlot[]   @relation(name: "PerformanceRehearsalSlot")
  concertSlot      ConcertSlot[]     @relation(name: "PerformanceConcertSlot")
}

model Applicant {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  name             String @default("")
  email            String @default("")
  phone            String @default("")
  applicantRemarks String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  performanceId String       @unique @db.ObjectId
  performance   Performance? @relation(name: "PerformanceApplicant", fields: [performanceId], references: [id], onDelete: Cascade)
}

model Preference {
  id                    String @id @default(auto()) @map("_id") @db.ObjectId
  concertAvailability   String @default("")
  rehearsalAvailability String @default("")
  preferenceRemarks     String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  performanceId String       @unique @db.ObjectId
  performance   Performance? @relation(name: "PerformancePreference", fields: [performanceId], references: [id], onDelete: Cascade)
}

model StageRequirement {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  chairCount        Int?
  musicStandCount   Int?
  microphoneCount   Int?
  providedEquipment String @default("")
  selfEquipment     String @default("")
  stageRemarks      String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  performanceId String       @unique @db.ObjectId
  performance   Performance? @relation(name: "PerformanceStageRequirement", fields: [performanceId], references: [id], onDelete: Cascade)
}

model ConcertSlot {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  order          Int
  name           String  @default("")
  startTime      String? // ISO 8601 date time string
  eventDuration  String? // ISO 8601 duration string
  bufferDuration String? // ISO 8601 duration string
  remarks        String  @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  performanceId String?      @db.ObjectId
  performance   Performance? @relation(name: "PerformanceConcertSlot", fields: [performanceId], references: [id], onDelete: Cascade)
}

model RehearsalSlot {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  order          Int
  name           String  @default("")
  startTime      String? // ISO 8601 date time string
  eventDuration  String  @default("PT0S") // ISO 8601 duration string
  bufferDuration String  @default("PT0S") // ISO 8601 duration string
  remarks        String  @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  performanceId String?      @db.ObjectId
  performance   Performance? @relation(name: "PerformanceRehearsalSlot", fields: [performanceId], references: [id], onDelete: Cascade)
}
